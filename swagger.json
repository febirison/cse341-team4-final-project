{
  "openapi": "3.0.0",
  "info": {
    "title": "Campus Coordinator API",
    "description": "This is an API server for the Campus Coordinator API project.\n\n## Project Information\nDeveloped by **Team 4** for *CSE341* at BYU Pathway.\n\n---\n\n## Development Team\n* **Anderson Okai**\n* **Jorge Luis Sosa Nunez**\n* **Andrew Omoniyi Mogbeyiromore**\n* **Erwin Jared Larios**\n* **Amornrat Dizon Howard**\n* **David da Rocha Fernandes**\n* **Ivan Sembatya**\n\n---\n\n*API Version 1.0.0 - June 2025*",
    "version": "1.0.0"
  },
  "tags": [
    {
      "name": "Students",
      "description": "Operations related to students"
    },
    {
      "name": "Courses",
      "description": "Operations related to courses"
    },
    {
      "name": "Clubs",
      "description": "Operations related to clubs"
    },
    {
      "name": "Rooms",
      "description": "Operations related to rooms"
    }
  ],
  "securitySchemes": {
    "githubOAuth": {
      "type": "oauth2",
      "flows": {
        "implicit": {
          "authorizationUrl": "https://github.com/login/oauth/authorize",
          "scopes": {
            "read:user": "read user profile info",
            "user:email": "read user email",
            "read:student": "read your student info",
            "write:student": "modify student info (create, update, delete)",
            "read:course": "read your course info",
            "write:course": "modify course info (create, update, delete)",
            "read:club": "read your club info",
            "write:club": "modify club info (create, update, delete)",
            "read:room": "read your room info",
            "write:room": "modify room info (create, update, delete)"
          }
        }
      }
    }
  },
  "security": [
    {
      "githubOAuth": []
    }
  ],

  "paths": {
    "/student": {
      "get": {
        "tags": ["Students"],
        "summary": "Get all students",
        "responses": {
          "200": {
            "description": "List of student",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Student"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Students"],
        "summary": "Create a new student",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Student"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Student created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Student"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data"
          }
        },
        "security": [
          {
            "githubOAuth": []
          }
        ]
      }
    },
    "/student/{id}": {
      "get": {
        "tags": ["Students"],
        "summary": "Get a student by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Student data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Student"
                }
              }
            }
          },
          "404": {
            "description": "Student not found"
          }
        }
      },
      "put": {
        "tags": ["Students"],
        "summary": "Update a student by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Student"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Student updated successfully"
          },
          "404": {
            "description": "Student not found"
          }
        },
        "security": [
          {
            "githubOAuth": []
          }
        ]
      },
      "delete": {
        "tags": ["Students"],
        "summary": "Delete a student by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content : student deleted successfully"
          },
          "404": {
            "description": "Student not found"
          }
        },
        "security": [
          {
            "githubOAuth": []
          }
        ]
      }
    },
    "/course": {
      "get": {
        "tags": ["Courses"],
        "summary": "Get all course",
        "responses": {
          "200": {
            "description": "List of course",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Course"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Courses"],
        "summary": "Create a new courses",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Course"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Course created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Course"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data"
          }
        },
        "security": [
          {
            "githubOAuth": []
          }
        ]
      }
    },
    "/course/{id}": {
      "get": {
        "tags": ["Courses"],
        "summary": "Get a course by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Course data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Course"
                }
              }
            }
          },
          "404": {
            "description": "Course not found"
          }
        }
      },
      "put": {
        "tags": ["Courses"],
        "summary": "Update a course by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Course"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Course updated successfully"
          },
          "404": {
            "description": "Course not found"
          }
        },
        "security": [
          {
            "githubOAuth": []
          }
        ]
      },
      "delete": {
        "tags": ["Courses"],
        "summary": "Delete a course by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content : Course deleted successfully"
          },
          "404": {
            "description": "Course not found"
          }
        },
        "security": [
          {
            "githubOAuth": []
          }
        ]
      }
    },
    "/club": {
      "get": {
        "tags": ["Clubs"],
        "summary": "Get all clubs",
        "responses": {
          "200": {
            "description": "List of club",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Club"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Clubs"],
        "summary": "Create a new club",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Club"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Club created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Club"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data"
          }
        },
        "security": [
          {
            "githubOAuth": []
          }
        ]
      }
    },
    "/club/{id}": {
      "get": {
        "tags": ["Clubs"],
        "summary": "Get a club by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Club data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Club"
                }
              }
            }
          },
          "404": {
            "description": "Club not found"
          }
        }
      },
      "put": {
        "tags": ["Clubs"],
        "summary": "Update a club by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Club"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Club updated successfully"
          },
          "404": {
            "description": "Club not found"
          }
        },
        "security": [
          {
            "githubOAuth": []
          }
        ]
      },
      "delete": {
        "tags": ["Clubs"],
        "summary": "Delete a club by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content : Club deleted successfully"
          },
          "404": {
            "description": "Club not found"
          }
        },
        "security": [
          {
            "githubOAuth": []
          }
        ]
      }
    },
    "/room": {
      "get": {
        "tags": ["Rooms"],
        "summary": "Get all rooms",
        "responses": {
          "200": {
            "description": "List of room",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Room"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Rooms"],
        "summary": "Create a new room",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Room"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Room created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Room"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data"
          }
        },
        "security": [
          {
            "githubOAuth": []
          }
        ]
      }
    },
    "/room/{id}": {
      "get": {
        "tags": ["Rooms"],
        "summary": "Get a room by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Room data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Room"
                }
              }
            }
          },
          "404": {
            "description": "Room not found"
          }
        }
      },
      "put": {
        "tags": ["Rooms"],
        "summary": "Update a room by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Room"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Room updated successfully"
          },
          "404": {
            "description": "Room not found"
          }
        },
        "security": [
          {
            "githubOAuth": []
          }
        ]
      },
      "delete": {
        "tags": ["Rooms"],
        "summary": "Delete a room by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content : Room deleted successfully"
          },
          "404": {
            "description": "Room not found"
          }
        },
        "security": [
          {
            "githubOAuth": []
          }
        ]
      }
    }
  },

  "components": {
    "schemas": {
      "Student": {
        "title": "Student",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "First name of the student",
            "example": "Charlie"
          },
          "lastName": {
            "type": "string",
            "description": "Last name of the student",
            "example": "Lee"
          },
          "gender": {
            "type": "string",
            "enum": ["male", "female", "other"],
            "description": "Gender identity of the student",
            "example": "other"
          },
          "dateOfBirth": {
            "type": "string",
            "format": "date-time",
            "description": "Date of birth",
            "example": "2006-03-02T00:00:00.000Z"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "Student's email address",
            "example": "charlie.lee@example.com"
          },
          "password": {
            "type": "string",
            "description": "Hashed password",
            "example": "hashedpassword3"
          },
          "githubId": {
            "type": "string",
            "description": "GitHub username of the student",
            "example": "charlieGithub"
          },
          "profilePicture": {
            "type": "string",
            "format": "uri",
            "description": "URI to profile image",
            "example": "https://example.com/images/charlie.jpg"
          },
          "courses": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "MongoDB ObjectId reference to Course",
              "pattern": "^[a-fA-F0-9]{24}$"
            },
            "example": []
          },
          "clubs": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "MongoDB ObjectId reference to Club",
              "pattern": "^[a-fA-F0-9]{24}$"
            },
            "example": []
          },
          "phoneNumber": {
            "type": "string",
            "description": "Phone number of the student",
            "example": "345-678-9012"
          }
        },
        "required": [
          "name",
          "lastName",
          "gender",
          "dateOfBirth",
          "email",
          "password"
        ]
      },
      "Course": {
        "title": "Course",
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Course title",
            "example": "Intro to Programming"
          },
          "courseCode": {
            "type": "string",
            "description": "Unique code of the course",
            "example": "CS101"
          },
          "description": {
            "type": "string",
            "description": "Brief overview of the course",
            "example": "Learn JavaScript fundamentals"
          },
          "instructor": {
            "type": "string",
            "description": "MongoDB ObjectId reference to Instructor",
            "example": "664b8df7254bd4e3f9a7f9b30"
          },
          "enrolledStudents": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "MongoDB ObjectId reference to Student",
              "pattern": "^[a-fA-F0-9]{24}$"
            },
            "example": [
              "664b8df7254bd4e3f9a7f9b31",
              "664b8df7254bd4e3f9a7f9b32"
            ]
          },
          "credits": {
            "type": "number",
            "description": "Number of credits for the course",
            "example": 3
          }
        },
        "required": [
          "title",
          "courseCode",
          "description",
          "instructor",
          "credits"
        ]
      },

      "Club": {
        "title": "Club",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the club",
            "example": "Art Club"
          },
          "description": {
            "type": "string",
            "description": "Club's description",
            "example": "Painting, drawing, and sculpture."
          },
          "members": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "MongoDB ObjectId reference to Student",
              "pattern": "^[a-fA-F0-9]{24}$"
            },
            "example": []
          },
          "meetingStartTime": {
            "type": "string",
            "format": "date-time",
            "description": "Start time of the club meeting",
            "example": "2025-06-12T14:30:00.000Z"
          },
          "meetingEndTime": {
            "type": "string",
            "format": "date-time",
            "description": "End time of the club meeting",
            "example": "2025-06-12T16:30:00.000Z"
          }
        },
        "required": [
          "name",
          "description",
          "meetingStartTime",
          "meetingEndTime"
        ]
      },
      "Room": {
        "title": "Room",
        "type": "object",
        "properties": {
          "buildingName": {
            "type": "string",
            "description": "Name of the building",
            "example": "Art Center"
          },
          "roomNumber": {
            "type": "string",
            "description": "Room number",
            "example": "303"
          },
          "capacity": {
            "type": "integer",
            "description": "Maximum number of people in the room",
            "example": 25
          },
          "students": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "MongoDB ObjectId reference to Student",
              "pattern": "^[a-fA-F0-9]{24}$"
            },
            "description": "Students assigned to this room"
          }
        },
        "required": ["buildingName", "roomNumber", "capacity"]
      }
    }
  }
}
